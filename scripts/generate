#! /usr/bin/env ruby

# frozen_string_literal: true

wd = File.expand_path('..', File.dirname(__FILE__))

matrices = File.read("#{wd}/src/matrix.txt").split(/\n{2,}/).map do |matrix_input|
  matrix_input.split("\n").map do |line|
    line.split('').map do |char|
      # all white space is 0x20, empty is 0xA0
      char == '1' ? '0xA0' : '0x20'
    end
  end
end

invalid = matrices.any? do |matrix|
  matrix.length != 21 || matrix.any? { |row| row.length != 21 }
end

data = matrices.map do |matrix|
  matrix.join(', ')
end.join(', ')

raise StandardError, 'Found matrix with invalid dimensions (  •̀⤙•́  )' if invalid

content = <<~CONTENT
  #include <stdint.h>
  #include <stddef.h>

  uint8_t rom[#{matrices.length * matrices.first.length**2}] = {
    #{data}
  };

  size_t matrix_count = #{matrices.length};
CONTENT

File.open("#{wd}/src/qr_rom.c", 'w+') do |f|
  f.puts content
end
